name: Linux

on:
  push:
    branches:
      - '**'
    paths:
      - '**'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - 'master'
    paths:
      - '**'

permissions:
  contents: write

jobs:
  test:
    strategy:
      matrix:
        julia-version: ['1']
        python-version: ['3.13']
        os: [ubuntu-latest]
        test-id: [main]
        include:
          - julia-version: '1.10'
            python-version: '3.10'
            os: ubuntu-latest
            test-id: include
          - julia-version: '1'
            python-version: '3.13'
            os: ubuntu-latest
            test-id: include
          - julia-version: '1'
            python-version: '3.8'
            os: ubuntu-latest
            test-id: include
    uses: ./.github/workflows/reusable.yml
    with:
      os: ${{ matrix.os }}
      python-version: ${{ matrix.python-version }}
      julia-version: ${{ matrix.julia-version }}
      run-coverage: true
      extra-tests: |
        echo 'import coverage; coverage.process_startup()' > "${{ github.workspace }}/sitecustomize.py"
        if [[ "${{ matrix.test-id }}" == "main" ]]; then
          coverage run --append -m pysr test jax
          coverage run --append -m pysr test torch
        fi
        coverage xml
    secrets: inherit

  dev_install:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-latest']
        python-version: ['3.13']
        julia-version: ['1']
        include:
          - os: ubuntu-latest
            python-version: '3.10'
            julia-version: '1.10'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - name: "Install PySR"
        run: |
            python -m pip install --upgrade pip
            pip install '.[dev]'
      - name: "Run development test"
        run: PYSR_TEST_JULIA_VERSION=${{ matrix.julia-version }} PYSR_TEST_PYTHON_VERSION=${{ matrix.python-version }} python -m pysr test dev

  conda_test:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        python-version: ['3.13']
        os: ['ubuntu-latest']

    steps:
      - uses: actions/checkout@v4
      - name: "Cache conda"
        uses: actions/cache@v4
        env:
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{ hashFiles('environment.yml') }}
      - name: "Set up Conda"
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-variant: Miniforge3
          miniforge-version: latest
          auto-activate-base: true
          python-version: ${{ matrix.python-version }}
          activate-environment: pysr-test
          environment-file: environment.yml
      - name: "Cache Julia"
        uses: julia-actions/cache@v2
        with:
          cache-name: ${{ matrix.os }}-conda-${{ matrix.python-version }}
          cache-packages: false
      - name: "Install PySR"
        run: |
            python3 -m pip install .
            python3 -c 'import pysr'
      - name: "Run tests"
        run: cd /tmp && python -m pysr test main

  types:
    name: Check types
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        python-version:
          - '3.13'
          - '3.10'
        os: ['ubuntu-latest']

    steps:
      - uses: actions/checkout@v4
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
      - name: "Install PySR and all dependencies"
        run: |
            python -m pip install --upgrade pip
            pip install '.[dev]'
      - name: "Run mypy"
        run: python -m mypy --install-types --non-interactive pysr
        if: ${{ matrix.python-version != '3.10' }}
      - name: "Run compatible mypy"
        run: python -m mypy --ignore-missing-imports pysr
        if: ${{ matrix.python-version == '3.10' }}

  beartype:
    name: Test with beartype
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    env:
      PYSR_USE_BEARTYPE: "1"
    strategy:
      matrix:
        python-version: ['3.13']

    steps:
      - uses: actions/checkout@v4
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
      - name: "Install PySR and all dependencies"
        run: |
            python -m pip install --upgrade pip
            pip install '.[dev]'
      - name: "Run tests"
        run: python -m pysr test main,jax,torch

  wheel_test:
    name: Test from wheel
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.13']
        julia-version: ['1']
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.julia-version }}

      - name: "Build wheel"
        run: |
          python -m pip install --upgrade pip build virtualenv
          python -m build --wheel
          mkdir -p /tmp/artifacts
          mv dist/*.whl /tmp/artifacts/

      - name: "Install wheel in venv & run smoke test"
        run: |
          mkdir -p /tmp/wheeltest
          cd /tmp/wheeltest
          python -m virtualenv .venv
          source .venv/bin/activate
          pip install /tmp/artifacts/*.whl
          python -c "import pysr; pysr.PySRRegressor(niterations=1).fit([[1]], [1])"
