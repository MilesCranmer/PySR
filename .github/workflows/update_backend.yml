name: PySR backend update
on:
  schedule:
    - cron: '00 00 * * *'
  workflow_dispatch:
permissions:
  pull-requests: write
  contents: write
jobs:
  update_compat:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.9
          cache: pip

      - name: "Install PySR"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install .
          python -c 'import pysr'

      - name: "Get SymbolicRegression.jl latest version"
        id: get-latest
        run: |
          cd $(mktemp -d)
          git clone https://github.com/MilesCranmer/SymbolicRegression.jl
          cd SymbolicRegression.jl
          echo "version=$(git describe --tags --abbrev=0 | sed 's/^v//')" >> $GITHUB_OUTPUT

      - name: "Get SymbolicRegression.jl version used in PySR"
        id: get-current
        run: |
          echo "version=$(python -c 'import pysr; print(pysr.version.__symbolic_regression_jl_version__)' 2>/dev/null)" >> $GITHUB_OUTPUT

      # If versions are different, we want to take our checked-out version,
      # create a new branch called "update_compat_{...}", where the "..."
      # is a timestamp. We then want to
      # go to pysr/version.py, bump the patch version of PySR (__version__),
      # set the version of __symbolic_regression_jl_version__ to the latest
      # version of SymbolicRegression.jl, and then commit and push.
      # Finally, we will open a PR from this branch to master.
      - name: "Update versions"
        if: ${{ steps.get-latest.outputs.version != steps.get-current.outputs.version }}
        run: |
          CURRENT_PY_VERSION_NUMBER=$(perl -nle 'print $1 if /version\s*=\s*"(\d+\.\d+)\.\d+"/' pyproject.toml)
          CURRENT_PY_PATCH_NUMBER=$(perl -nle 'print $1 if /version\s*=\s*"\d+\.\d+\.(\d+)"/' pyproject.toml)
          NEW_PY_PATCH_NUMBER=$((CURRENT_PY_PATCH_NUMBER + 1))
          echo CURRENT_PY_VERSION_NUMBER=$CURRENT_PY_VERSION_NUMBER CURRENT_PY_PATCH_NUMBER=$CURRENT_PY_PATCH_NUMBER NEW_PY_PATCH_NUMBER=$NEW_PY_PATCH_NUMBER
          sed -i.bak  "s/version = .*/version = \"$CURRENT_PY_VERSION_NUMBER.$NEW_PY_PATCH_NUMBER\"/" pyproject.toml
          echo Updated pyproject.toml contents
          cat pyproject.toml

          # Set new backend julia package version
          echo Current pysr/juliapkg.json contents
          cat pysr/juliapkg.json
          # Assumes your julia package is the first in the list.
          CURRENT_JL_VERSION_NUMBER=$(perl -nle 'print $1 if /"version"\s*:\s*"(.\d+\.\d+\.\d+)"/' pysr/juliapkg.json | head -n 1)
          NEW_JL_VERSION_NUMBER="${{ steps.get-latest.outputs.version }}"
          echo CURRENT_JL_VERSION_NUMBER=$CURRENT_JL_VERSION_NUMBER NEW_JL_VERSION_NUMBER=$NEW_JL_VERSION_NUMBER
          sed -i.bak  "s/\"version\": \"$CURRENT_JL_VERSION_NUMBER\"/\"version\": \"=$NEW_JL_VERSION_NUMBER\"/" pysr/juliapkg.json
          echo Updated pysr/juliapkg.json contents
          cat pysr/juliapkg.json

      - name: "Create PR"
        uses: peter-evans/create-pull-request@v6
        with:
          title: "Automated update to backend: v${{ steps.get-latest.outputs.version }}"
          body: |
            This PR was automatically generated by the GitHub Action `.github/workflows/update-backend.yml`

            It updates the backend version to v${{ steps.get-latest.outputs.version }}. For a full description of the changes, see the backend changelog: [v${{ steps.get-latest.outputs.version }}](https://github.com/MilesCranmer/SymbolicRegression.jl/releases/tag/v${{ steps.get-latest.outputs.version }}).
          delete-branch: true
          commit-message: "Update backend version to v${{ steps.get-latest.outputs.version }}"
          add-paths: |
            pyproject.toml
            pysr/juliapkg.json
