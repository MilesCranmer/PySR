import{_ as s,c as i,o as a,aA as t}from"./chunks/framework.CHSKrKFr.js";const k=JSON.parse('{"title":"Customization","description":"","frontmatter":{},"headers":[],"relativePath":"backend.md","filePath":"backend.md","lastUpdated":1760187245000}'),n={name:"backend.md"};function o(l,e,h,r,c,p){return a(),i("div",null,[...e[0]||(e[0]=[t(`<h1 id="customization" tabindex="-1">Customization <a class="header-anchor" href="#customization" aria-label="Permalink to &quot;Customization&quot;">​</a></h1><p>If you have explored the <a href="./options">options</a> and <a href="./api">PySRRegressor reference</a>, and still haven&#39;t figured out how to specify a constraint or objective required for your problem, you might consider editing the backend. The backend of PySR is written as a pure Julia package under the name <a href="https://github.com/MilesCranmer/SymbolicRegression.jl" target="_blank" rel="noreferrer">SymbolicRegression.jl</a>. This package is accessed with <a href="https://github.com/JuliaPy/PythonCall.jl" target="_blank" rel="noreferrer"><code>juliacall</code></a>, which allows us to transfer objects back and forth between the Python and Julia runtimes.</p><p>PySR gives you access to everything in SymbolicRegression.jl, but there are some specific use-cases which require modifications to the backend itself. Generally you can do this as follows:</p><h2 id="_1-check-out-the-source-code" tabindex="-1">1. Check out the source code <a class="header-anchor" href="#_1-check-out-the-source-code" aria-label="Permalink to &quot;1. Check out the source code&quot;">​</a></h2><p>Clone a copy of the backend as well as PySR:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/MilesCranmer/SymbolicRegression.jl</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/MilesCranmer/PySR</span></span></code></pre></div><p>You may wish to check out the specific versions, which you can do with:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PySR</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">versio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># You can see the current backend version in \`pysr/juliapkg.json\`</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ../SymbolicRegression.jl</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">backend_versio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h2 id="_2-edit-the-source-to-your-requirements" tabindex="-1">2. Edit the source to your requirements <a class="header-anchor" href="#_2-edit-the-source-to-your-requirements" aria-label="Permalink to &quot;2. Edit the source to your requirements&quot;">​</a></h2><p>The main search code can be found in <code>src/SymbolicRegression.jl</code>.</p><p>Here are some tips:</p><ul><li>The documentation for the backend is given <a href="https://ai.damtp.cam.ac.uk/symbolicregression/dev/" target="_blank" rel="noreferrer">here</a>.</li><li>Throughout the package, you will often see template functions which typically use a symbol <code>T</code> (such as in the string <code>where {T&lt;:Real}</code>). Here, <code>T</code> is simply the datatype of the input data and stored constants, such as <code>Float32</code> or <code>Float64</code>. Writing functions in this way lets us write functions generic to types, while still having access to the specific type specified at compilation time.</li><li>Expressions are stored as binary trees, using the <code>Node{T}</code> type, described <a href="https://ai.damtp.cam.ac.uk/symbolicregression/dev/types/#SymbolicRegression.CoreModule.EquationModule.Node" target="_blank" rel="noreferrer">here</a>.</li><li>For reference, the main loop itself is found in the <code>equation_search</code> function inside <a href="https://github.com/MilesCranmer/SymbolicRegression.jl/blob/master/src/SymbolicRegression.jl" target="_blank" rel="noreferrer"><code>src/SymbolicRegression.jl</code></a>.</li><li>Parts of the code which are typically edited by users include: <ul><li><a href="https://github.com/MilesCranmer/SymbolicRegression.jl/blob/master/src/CheckConstraints.jl" target="_blank" rel="noreferrer"><code>src/CheckConstraints.jl</code></a>, particularly the function <code>check_constraints</code>. This function checks whether a given expression satisfies constraints, such as having a complexity lower than <code>maxsize</code>, and whether it contains any forbidden nestings of functions. <ul><li>Note that all expressions, <em>even intermediate expressions</em>, must comply with constraints. Therefore, make sure that evolution can still reach your desired expression (with one mutation at a time), before setting a hard constraint. In other cases you might want to instead put in the loss function.</li></ul></li><li><a href="https://github.com/MilesCranmer/SymbolicRegression.jl/blob/master/src/Options.jl" target="_blank" rel="noreferrer"><code>src/Options.jl</code></a>, as well as the struct definition in <a href="https://github.com/MilesCranmer/SymbolicRegression.jl/blob/master/src/OptionsStruct.jl" target="_blank" rel="noreferrer"><code>src/OptionsStruct.jl</code></a>. This file specifies all the options used in the search: an instance of <code>Options</code> is typically available throughout every function in <code>SymbolicRegression.jl</code>. If you add new functionality to the backend, and wish to make it parameterizable (including from PySR), you should specify it in the options.</li></ul></li></ul><h2 id="_3-let-pysr-use-the-modified-backend" tabindex="-1">3. Let PySR use the modified backend <a class="header-anchor" href="#_3-let-pysr-use-the-modified-backend" aria-label="Permalink to &quot;3. Let PySR use the modified backend&quot;">​</a></h2><p>Once you have made your changes, you should edit the <code>pysr/juliapkg.json</code> file in the PySR repository to point to this local copy. Do this by removing the <code>&quot;version&quot;</code> key and adding a <code>&quot;dev&quot;</code> and <code>&quot;path&quot;</code> key:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;packages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;SymbolicRegression&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;uuid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8254be44-1295-4e6a-a16d-46603ac705cb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/SymbolicRegression.jl&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    ...</span></span></code></pre></div><p>You can then install PySR with this modified backend by running:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PySR</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><p>For more information on <code>juliapkg.json</code>, see <a href="https://github.com/JuliaPy/pyjuliapkg" target="_blank" rel="noreferrer"><code>pyjuliapkg</code></a>.</p><h2 id="additional-notes" tabindex="-1">Additional notes <a class="header-anchor" href="#additional-notes" aria-label="Permalink to &quot;Additional notes&quot;">​</a></h2><p>If you get comfortable enough with the backend, you might consider using the Julia package directly: the API is given on the <a href="https://ai.damtp.cam.ac.uk/symbolicregression/dev/" target="_blank" rel="noreferrer">SymbolicRegression.jl documentation</a>.</p><p>If you make a change that you think could be useful to other users, don&#39;t hesitate to open a pull request on either the PySR or SymbolicRegression.jl repositories! Contributions are very appreciated.</p>`,21)])])}const u=s(n,[["render",o]]);export{k as __pageData,u as default};
