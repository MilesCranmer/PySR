import{_ as s,c as i,o as e,aA as t}from"./chunks/framework.BqOnkLqf.js";const k=JSON.parse('{"title":"Internal Reference","description":"","frontmatter":{},"headers":[],"relativePath":"api-advanced.md","filePath":"api-advanced.md","lastUpdated":null}'),n={name:"api-advanced.md"};function l(p,a,h,o,r,d){return e(),i("div",null,[...a[0]||(a[0]=[t(`<h1 id="internal-reference" tabindex="-1">Internal Reference <a class="header-anchor" href="#internal-reference" aria-label="Permalink to &quot;Internal Reference&quot;">​</a></h1><h2 id="julia-interface" tabindex="-1">Julia Interface <a class="header-anchor" href="#julia-interface" aria-label="Permalink to &quot;Julia Interface&quot;">​</a></h2><h3 id="init-julia" tabindex="-1">init_julia <a class="header-anchor" href="#init-julia" aria-label="Permalink to &quot;init_julia&quot;">​</a></h3><p><code>init_julia(*args, **kwargs)</code></p><p><em>No documentation available.</em></p><h3 id="install" tabindex="-1">install <a class="header-anchor" href="#install" aria-label="Permalink to &quot;install&quot;">​</a></h3><p><code>install(*args, **kwargs)</code></p><p><em>No documentation available.</em></p><h2 id="exporting-to-latex" tabindex="-1">Exporting to LaTeX <a class="header-anchor" href="#exporting-to-latex" aria-label="Permalink to &quot;Exporting to LaTeX&quot;">​</a></h2><h3 id="sympy2latex" tabindex="-1">sympy2latex <a class="header-anchor" href="#sympy2latex" aria-label="Permalink to &quot;sympy2latex&quot;">​</a></h3><p><code>sympy2latex(expr, prec=3, full_prec=True, **settings) -&gt; &#39;str&#39;</code></p><p>Convert sympy expression to LaTeX with custom precision.</p><h3 id="sympy2latextable" tabindex="-1">sympy2latextable <a class="header-anchor" href="#sympy2latextable" aria-label="Permalink to &quot;sympy2latextable&quot;">​</a></h3><p><code>sympy2latextable(equations: &#39;pd.DataFrame&#39;, indices: &#39;list[int] | None&#39; = None, precision: &#39;int&#39; = 3, columns: &#39;list[str]&#39; = [&#39;equation&#39;, &#39;complexity&#39;, &#39;loss&#39;, &#39;score&#39;], max_equation_length: &#39;int&#39; = 50, output_variable_name: &#39;str&#39; = &#39;y&#39;) -&gt; &#39;str&#39;</code></p><p>Generate a booktabs-style LaTeX table for a single set of equations.</p><h3 id="sympy2multilatextable" tabindex="-1">sympy2multilatextable <a class="header-anchor" href="#sympy2multilatextable" aria-label="Permalink to &quot;sympy2multilatextable&quot;">​</a></h3><p><code>sympy2multilatextable(equations: &#39;list[pd.DataFrame]&#39;, indices: &#39;list[list[int]] | None&#39; = None, precision: &#39;int&#39; = 3, columns: &#39;list[str]&#39; = [&#39;equation&#39;, &#39;complexity&#39;, &#39;loss&#39;, &#39;score&#39;], output_variable_names: &#39;list[str] | None&#39; = None) -&gt; &#39;str&#39;</code></p><p>Generate multiple latex tables for a list of equation sets.</p><h3 id="generate-table-environment" tabindex="-1">generate_table_environment <a class="header-anchor" href="#generate-table-environment" aria-label="Permalink to &quot;generate_table_environment&quot;">​</a></h3><p><code>generate_table_environment(columns: &#39;list[str]&#39; = [&#39;equation&#39;, &#39;complexity&#39;, &#39;loss&#39;]) -&gt; &#39;tuple[str, str]&#39;</code></p><p><em>No documentation available.</em></p><h2 id="exporting-to-jax" tabindex="-1">Exporting to JAX <a class="header-anchor" href="#exporting-to-jax" aria-label="Permalink to &quot;Exporting to JAX&quot;">​</a></h2><h3 id="sympy2jax" tabindex="-1">sympy2jax <a class="header-anchor" href="#sympy2jax" aria-label="Permalink to &quot;sympy2jax&quot;">​</a></h3><p><code>sympy2jax(expression, symbols_in, selection=None, extra_jax_mappings=None)</code></p><p>Returns a function f and its parameters;</p><p>the function takes an input matrix, and a list of arguments: f(X, parameters) where the parameters appear in the JAX equation.</p><p><strong>Examples</strong></p><p>Let&#39;s create a function in SymPy:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x, y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> symbols(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x y&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cosx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sympy.cos(x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y</span></span></code></pre></div><p>Let&#39;s get the JAX version. We pass the equation, and the symbols required.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f, params </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sympy2jax(cosx, [x, y])</span></span></code></pre></div><p>The order you supply the symbols is the same order you should supply the features when calling the function <code>f</code> (shape <code>[nrows, nfeatures]</code>). In this case, features=2 for x and y. The <code>params</code> in this case will be <code>jnp.array([1.0, 3.2])</code>. You pass these parameters when calling the function, which will let you change them and take gradients.</p><p>Let&#39;s generate some JAX data to pass:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> random.PRNGKey(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> random.normal(key, (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>We can call the function with:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f(X, params)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#&gt; DeviceArray([-2.6080756 ,  0.72633684, -6.7557726 , -0.2963162 ,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#                6.6014843 ,  5.032483  , -0.810931  ,  4.2520013 ,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#                3.5427954 , -2.7479894 ], dtype=float32)</span></span></code></pre></div><p>We can take gradients with respect to the parameters for each row with JAX gradient parameters now:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jac_f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jax.jacobian(f, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argnums</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jac_f(X, params)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#&gt; DeviceArray([[ 0.49364874, -0.9692889 ],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#               [ 0.8283714 , -0.0318858 ],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#               [-0.7447336 , -1.8784496 ],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#               [ 0.70755106, -0.3137085 ],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#               [ 0.944834  ,  1.767703  ],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#               [ 0.51673377,  1.4111717 ],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#               [ 0.87347716, -0.52637756],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#               [ 0.8760679 ,  1.0549792 ],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#               [ 0.9961824 ,  0.79581654],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#               [-0.88465923, -0.5822907 ]], dtype=float32)</span></span></code></pre></div><p>We can also JIT-compile our function:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compiled_f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jax.jit(f)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compiled_f(X, params)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#&gt; DeviceArray([-2.6080756 ,  0.72633684, -6.7557726 , -0.2963162 ,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#                6.6014843 ,  5.032483  , -0.810931  ,  4.2520013 ,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#                3.5427954 , -2.7479894 ], dtype=float32)</span></span></code></pre></div><h3 id="sympy2jaxtext" tabindex="-1">sympy2jaxtext <a class="header-anchor" href="#sympy2jaxtext" aria-label="Permalink to &quot;sympy2jaxtext&quot;">​</a></h3><p><code>sympy2jaxtext(expr, parameters, symbols_in, extra_jax_mappings=None)</code></p><p><em>No documentation available.</em></p><h2 id="exporting-to-pytorch" tabindex="-1">Exporting to PyTorch <a class="header-anchor" href="#exporting-to-pytorch" aria-label="Permalink to &quot;Exporting to PyTorch&quot;">​</a></h2><h3 id="sympy2torch" tabindex="-1">sympy2torch <a class="header-anchor" href="#sympy2torch" aria-label="Permalink to &quot;sympy2torch&quot;">​</a></h3><p><code>sympy2torch(expression, symbols_in, selection=None, extra_torch_mappings=None)</code></p><p>Returns a module for a given sympy expression with trainable parameters;</p><p>This function will assume the input to the module is a matrix X, where each column corresponds to each symbol you pass in <code>symbols_in</code>.</p>`,48)])])}const y=s(n,[["render",l]]);export{k as __pageData,y as default};
